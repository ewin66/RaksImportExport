// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CodeBeautify;
//
//    var welcome6 = Welcome6.FromJson(jsonString);

namespace CodeBeautify
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome6
    {
        [JsonProperty("RAKS_R3")]
        public Welcome6RaksR3 RaksR3 { get; set; }
    }

    public partial class Welcome6RaksR3
    {
        [JsonProperty("EXPORT")]
        public Export Export { get; set; }
    }

    public partial class Export
    {
        [JsonProperty("METADANE")]
        public Metadane Metadane { get; set; }

        [JsonProperty("RECEPTURY")]
        public ExportReceptury Receptury { get; set; }

        [JsonProperty("ARTYKULY")]
        public ExportArtykuly Artykuly { get; set; }

        [JsonProperty("GRUPY_ARTYKULOW")]
        public GrupyArtykulow GrupyArtykulow { get; set; }

        [JsonProperty("_ID")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("_DATA_EKSPORTU")]
        public DateTimeOffset DataEksportu { get; set; }

        [JsonProperty("_EKSPORTUJACY")]
        public string Eksportujacy { get; set; }

        [JsonProperty("_WERSJA")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Wersja { get; set; }
    }

    public partial class ExportArtykuly
    {
        [JsonProperty("WIERSZ")]
        public ArtykulyWiersz[] Wiersz { get; set; }
    }

    public partial class ArtykulyWiersz
    {
        [JsonProperty("DODATKOWE")]
        public Dodatkowe Dodatkowe { get; set; }

        [JsonProperty("_ID")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("_ID_GRUPY")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IdGrupy { get; set; }

        [JsonProperty("_RODZAJ")]
        public Rodzaj Rodzaj { get; set; }

        [JsonProperty("_LICENCJA")]
        public Licencja Licencja { get; set; }

        [JsonProperty("_INDEKS")]
        public string Indeks { get; set; }

        [JsonProperty("_NAZWA")]
        public string Nazwa { get; set; }

        [JsonProperty("_INDEKS2")]
        public string Indeks2 { get; set; }

        [JsonProperty("_PKWIU")]
        public string Pkwiu { get; set; }

        [JsonProperty("_ID_STAWKI_VAT")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IdStawkiVat { get; set; }

        [JsonProperty("_STAWKA_VAT")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long StawkaVat { get; set; }

        [JsonProperty("_TYP_STAWKI_VAT")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TypStawkiVat { get; set; }

        [JsonProperty("_ID_JEDNOSTKI_MIARY")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IdJednostkiMiary { get; set; }

        [JsonProperty("_SKROT_JEDNOSTKI_MIARY")]
        public SkrotJednostkiMiary SkrotJednostkiMiary { get; set; }

        [JsonProperty("_NAZWA_JEDNOSTKI_MIARY")]
        public NazwaJednostkiMiary NazwaJednostkiMiary { get; set; }

        [JsonProperty("_PODZIELNOSC")]
        public Licencja Podzielnosc { get; set; }

        [JsonProperty("_ANALITYKA_FK")]
        public string AnalitykaFk { get; set; }

        [JsonProperty("_ID_OPAKOWANIA")]
        public string IdOpakowania { get; set; }

        [JsonProperty("_SZTUK_W_OPAKOWANIU")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long SztukWOpakowaniu { get; set; }

        [JsonProperty("_NEW_ID")]
        public string NewId { get; set; }

        [JsonProperty("_GTIN")]
        public string Gtin { get; set; }

        [JsonProperty("_MECHANIZM_PODZIELONEJ_PLATNOSCI")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MechanizmPodzielonejPlatnosci { get; set; }

        [JsonProperty("_OZNACZENIE_GTU_VAT")]
        public string OznaczenieGtuVat { get; set; }

        [JsonProperty("KODY_OPAKOWANIA", NullValueHandling = NullValueHandling.Ignore)]
        public KodyOpakowania KodyOpakowania { get; set; }
    }

    public partial class Dodatkowe
    {
        [JsonProperty("WIERSZ")]
        public DodatkoweWiersz Wiersz { get; set; }
    }

    public partial class DodatkoweWiersz
    {
        [JsonProperty("_ID_DOMYSLNEGO_RABATU")]
        public string IdDomyslnegoRabatu { get; set; }

        [JsonProperty("_NAZWA_DOMYSLNEGO_RABATU")]
        public string NazwaDomyslnegoRabatu { get; set; }

        [JsonProperty("_OSTRZEGAJ_O_SPRZ_PONIZEJ_CENY_ZAKUPU")]
        public Licencja OstrzegajOSprzPonizejCenyZakupu { get; set; }

        [JsonProperty("_WAGA_NETTO")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long WagaNetto { get; set; }

        [JsonProperty("_WAGA_BRUTTO")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long WagaBrutto { get; set; }

        [JsonProperty("_UWAGI")]
        public string Uwagi { get; set; }

        [JsonProperty("_PROWIZJA_AKWIZYTORA")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ProwizjaAkwizytora { get; set; }

        [JsonProperty("_DNI_PRZYDATNOSCI")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long DniPrzydatnosci { get; set; }

        [JsonProperty("_STAN_MINIMALNY")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long StanMinimalny { get; set; }

        [JsonProperty("_STAN_MAKSYMALNY")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long StanMaksymalny { get; set; }

        [JsonProperty("_ID_DOSTAWCY")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IdDostawcy { get; set; }

        [JsonProperty("_NIP_DOSTAWCY")]
        public NipDostawcyUnion NipDostawcy { get; set; }

        [JsonProperty("_NAZWA_SKROCONA_DOSTAWCY")]
        public string NazwaSkroconaDostawcy { get; set; }

        [JsonProperty("_ID_PRODUCENTA")]
        public string IdProducenta { get; set; }

        [JsonProperty("_NIP_PRODUCENTA")]
        public NipProducentaUnion NipProducenta { get; set; }

        [JsonProperty("_NAZWA_SKROCONA_PRODUCENTA")]
        public NazwaSkroconaProducenta NazwaSkroconaProducenta { get; set; }

        [JsonProperty("_KOD_CN")]
        public string KodCn { get; set; }

        [JsonProperty("_KOD_CN_NAZWA")]
        public string KodCnNazwa { get; set; }

        [JsonProperty("_JM_CN")]
        public string JmCn { get; set; }

        [JsonProperty("_SKROT_JEDNOSTKI_MIARY_CN")]
        public string SkrotJednostkiMiaryCn { get; set; }

        [JsonProperty("_NAZWA_JEDNOSTKI_MIARY_CN")]
        public string NazwaJednostkiMiaryCn { get; set; }

        [JsonProperty("_PRZELICZNIK_CN")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PrzelicznikCn { get; set; }

        [JsonProperty("_BEZ_MASY")]
        public Licencja BezMasy { get; set; }

        [JsonProperty("_INTRASTAT")]
        public Licencja Intrastat { get; set; }

        [JsonProperty("_PCN")]
        public string Pcn { get; set; }

        [JsonProperty("_KOD_KRESKOWY")]
        public string KodKreskowy { get; set; }

        [JsonProperty("_MASKA_KODU_KRESKOWEGO")]
        public string MaskaKoduKreskowego { get; set; }

        [JsonProperty("_MIN_ILOSC_PSP")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MinIloscPsp { get; set; }

        [JsonProperty("_MIN_ILOSC_ZD")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MinIloscZd { get; set; }

        [JsonProperty("_MIN_ILOSC_ZO")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MinIloscZo { get; set; }

        [JsonProperty("_MIN_ILOSC_PR")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MinIloscPr { get; set; }

        [JsonProperty("_FUNDUSZ_PROMOCJI")]
        public string FunduszPromocji { get; set; }
    }

    public partial class KodyOpakowania
    {
        [JsonProperty("WIERSZ")]
        public KodyOpakowaniaWiersz Wiersz { get; set; }
    }

    public partial class KodyOpakowaniaWiersz
    {
        [JsonProperty("_ID_OPAKOWANIA")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IdOpakowania { get; set; }

        [JsonProperty("_SKROT_OPAKOWANIA")]
        public string SkrotOpakowania { get; set; }

        [JsonProperty("_KOD_KRESKOWY")]
        public string KodKreskowy { get; set; }

        [JsonProperty("_POJEMNOSC")]
        public string Pojemnosc { get; set; }

        [JsonProperty("_DOMYSLNE")]
        public Licencja Domyslne { get; set; }

        [JsonProperty("_UWAGI")]
        public string Uwagi { get; set; }
    }

    public partial class GrupyArtykulow
    {
        [JsonProperty("WIERSZ")]
        public GrupyArtykulowWiersz[] Wiersz { get; set; }
    }

    public partial class GrupyArtykulowWiersz
    {
        [JsonProperty("_ID")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("_ID_NADRZEDNEJ")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IdNadrzednej { get; set; }

        [JsonProperty("_NAZWA")]
        public string Nazwa { get; set; }

        [JsonProperty("_ANALITYKA_FK")]
        public string AnalitykaFk { get; set; }

        [JsonProperty("_NEW_ID")]
        public string NewId { get; set; }
    }

    public partial class Metadane
    {
        [JsonProperty("RAKS_R3")]
        public MetadaneRaksR3 RaksR3 { get; set; }
    }

    public partial class MetadaneRaksR3
    {
        [JsonProperty("POLE")]
        public Pole[] Pole { get; set; }

        [JsonProperty("RECEPTURY")]
        public RaksR3Receptury Receptury { get; set; }

        [JsonProperty("ARTYKULY")]
        public RaksR3Artykuly Artykuly { get; set; }

        [JsonProperty("GRUPY_ARTYKULOW")]
        public DodatkoweClass GrupyArtykulow { get; set; }
    }

    public partial class RaksR3Artykuly
    {
        [JsonProperty("POLE")]
        public Pole[] Pole { get; set; }

        [JsonProperty("DODATKOWE")]
        public DodatkoweClass Dodatkowe { get; set; }

        [JsonProperty("KODY_OPAKOWANIA")]
        public DodatkoweClass KodyOpakowania { get; set; }
    }

    public partial class DodatkoweClass
    {
        [JsonProperty("POLE")]
        public Pole[] Pole { get; set; }
    }

    public partial class Pole
    {
        [JsonProperty("_NAZWA")]
        public string Nazwa { get; set; }

        [JsonProperty("_TYP")]
        public Typ Typ { get; set; }

        [JsonProperty("_SZEROKOŚĆ")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Szerokość { get; set; }

        [JsonProperty("_OPIS")]
        public string Opis { get; set; }

        [JsonProperty("_WYMAGANE")]
        public Wymagane Wymagane { get; set; }
    }

    public partial class RaksR3Receptury
    {
        [JsonProperty("POLE")]
        public Pole[] Pole { get; set; }

        [JsonProperty("SKLADNIKI")]
        public DodatkoweClass Skladniki { get; set; }
    }

    public partial class ExportReceptury
    {
        [JsonProperty("WIERSZ")]
        public RecepturyWiersz[] Wiersz { get; set; }
    }

    public partial class RecepturyWiersz
    {
        [JsonProperty("SKLADNIKI")]
        public Skladniki Skladniki { get; set; }

        [JsonProperty("_ID")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("_KOD_KRESKOWY")]
        public string KodKreskowy { get; set; }

        [JsonProperty("_NAZWA")]
        public string Nazwa { get; set; }

        [JsonProperty("_ID_ARTYKULU")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IdArtykulu { get; set; }

        [JsonProperty("_INDEKS_ARTYKULU")]
        public string IndeksArtykulu { get; set; }

        [JsonProperty("_UWAGI")]
        public string Uwagi { get; set; }

        [JsonProperty("_CECHY")]
        public string Cechy { get; set; }

        [JsonProperty("_NEW_ID")]
        public string NewId { get; set; }
    }

    public partial class Skladniki
    {
        [JsonProperty("WIERSZ")]
        public WierszUnion Wiersz { get; set; }
    }

    public partial class WierszWiersz
    {
        [JsonProperty("_ID_ARTYKULU")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IdArtykulu { get; set; }

        [JsonProperty("_INDEKS_ARTYKULU")]
        public string IndeksArtykulu { get; set; }

        [JsonProperty("_CECHY")]
        public string Cechy { get; set; }

        [JsonProperty("_ILOSC")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Ilosc { get; set; }

        [JsonProperty("_ID_OPAKOWANIA")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IdOpakowania { get; set; }

        [JsonProperty("_OPAKOWANIA")]
        public Opakowania Opakowania { get; set; }

        [JsonProperty("_ILOSC_OPAKOWAN")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IloscOpakowan { get; set; }
    }

    public enum Licencja { False, True };

    public enum NazwaSkroconaProducenta { AdamedSpZOO, AmgenSpZOO, BaxterPolskaSpZOO, Empty, FreseniusKabiPolskaSpZOO, JanssenCilagPolskaSpZOO, JohnsonJohnson, Medac, MerckSpZOO, NovartisPolandSpZOO, PfizerPolskaSpZOO, PfizerTradingPolskaSpółkaZOgraniczonąOdpowie, PolfaŁódźSA, RochePolskaSpZOO, SandozGmbH, ServierPolskaServices, TevaPharmaceuticalsSpZOO, ZentivaKS };

    public enum NipDostawcyEnum { Empty, The5212935353, The5213328885, The5220014461, The5222665719, The5222749770, The5242625887, The5242706580, The5272367467, The5272420782, The5320100906, The6340125442, The6481008230, The7281341936, The8130140525, The8271818828, The8490000039, The8942556799 };

    public enum NipProducentaEnum { Empty, The5210000204, The5212935353, The5213115586, The5213328885, The5220014461, The5222665719, The5251032201, The5260204802, The5272367467, The5272420782, The5340002064, The7261407230, The8271818828 };

    public enum NazwaJednostkiMiary { Ampułki, Fiolka, Miligram, Opakowanie, Schemat, Sztuka, The1000JednostekMiędzynar };

    public enum Rodzaj { Towar };

    public enum SkrotJednostkiMiary { Amp, Fiol, Mg, Op, Schem, Szt, TysIu };

    public enum Typ { Bcd, Boolean, Date, Float, Integer, String };

    public enum Wymagane { Nie, Tak };

    public enum Opakowania { Empty, F100 };

    public partial struct NipDostawcyUnion
    {
        public NipDostawcyEnum? Enum;
        public long? Integer;

        public static implicit operator NipDostawcyUnion(NipDostawcyEnum Enum) => new NipDostawcyUnion { Enum = Enum };
        public static implicit operator NipDostawcyUnion(long Integer) => new NipDostawcyUnion { Integer = Integer };
    }

    public partial struct NipProducentaUnion
    {
        public NipProducentaEnum? Enum;
        public long? Integer;

        public static implicit operator NipProducentaUnion(NipProducentaEnum Enum) => new NipProducentaUnion { Enum = Enum };
        public static implicit operator NipProducentaUnion(long Integer) => new NipProducentaUnion { Integer = Integer };
    }

    public partial struct WierszUnion
    {
        public WierszWiersz WierszWiersz;
        public WierszWiersz[] WierszWierszArray;

        public static implicit operator WierszUnion(WierszWiersz WierszWiersz) => new WierszUnion { WierszWiersz = WierszWiersz };
        public static implicit operator WierszUnion(WierszWiersz[] WierszWierszArray) => new WierszUnion { WierszWierszArray = WierszWierszArray };
    }

    public partial class Welcome6
    {
        public static Welcome6 FromJson(string json) => JsonConvert.DeserializeObject<Welcome6>(json, CodeBeautify.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome6 self) => JsonConvert.SerializeObject(self, CodeBeautify.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                LicencjaConverter.Singleton,
                NazwaSkroconaProducentaConverter.Singleton,
                NipDostawcyUnionConverter.Singleton,
                NipDostawcyEnumConverter.Singleton,
                NipProducentaUnionConverter.Singleton,
                NipProducentaEnumConverter.Singleton,
                NazwaJednostkiMiaryConverter.Singleton,
                RodzajConverter.Singleton,
                SkrotJednostkiMiaryConverter.Singleton,
                TypConverter.Singleton,
                WymaganeConverter.Singleton,
                WierszUnionConverter.Singleton,
                OpakowaniaConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class LicencjaConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Licencja) || t == typeof(Licencja?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "False":
                    return Licencja.False;
                case "True":
                    return Licencja.True;
            }
            throw new Exception("Cannot unmarshal type Licencja");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Licencja)untypedValue;
            switch (value)
            {
                case Licencja.False:
                    serializer.Serialize(writer, "False");
                    return;
                case Licencja.True:
                    serializer.Serialize(writer, "True");
                    return;
            }
            throw new Exception("Cannot marshal type Licencja");
        }

        public static readonly LicencjaConverter Singleton = new LicencjaConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class NazwaSkroconaProducentaConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NazwaSkroconaProducenta) || t == typeof(NazwaSkroconaProducenta?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return NazwaSkroconaProducenta.Empty;
                case "ADAMED Sp.z o.o.":
                    return NazwaSkroconaProducenta.AdamedSpZOO;
                case "AMGEN Sp. z o.o.":
                    return NazwaSkroconaProducenta.AmgenSpZOO;
                case "Baxter Polska Sp.z o.o.":
                    return NazwaSkroconaProducenta.BaxterPolskaSpZOO;
                case "FRESENIUS KABI POLSKA SP. Z O.O.":
                    return NazwaSkroconaProducenta.FreseniusKabiPolskaSpZOO;
                case "JANSSEN-CILAG POLSKA Sp. z o.o.":
                    return NazwaSkroconaProducenta.JanssenCilagPolskaSpZOO;
                case "Johnson&Johnson":
                    return NazwaSkroconaProducenta.JohnsonJohnson;
                case "Medac ":
                    return NazwaSkroconaProducenta.Medac;
                case "Merck Sp. z o.o.":
                    return NazwaSkroconaProducenta.MerckSpZOO;
                case "NOVARTIS Poland Sp. z o.o.":
                    return NazwaSkroconaProducenta.NovartisPolandSpZOO;
                case "PFIZER TRADING POLSKA SPÓŁKA Z OGRANICZONĄ ODPOWIE":
                    return NazwaSkroconaProducenta.PfizerTradingPolskaSpółkaZOgraniczonąOdpowie;
                case "Pfizer Polska Sp. z o.o.":
                    return NazwaSkroconaProducenta.PfizerPolskaSpZOO;
                case "Polfa Łódź S.A.":
                    return NazwaSkroconaProducenta.PolfaŁódźSA;
                case "Roche Polska Sp. z o.o.":
                    return NazwaSkroconaProducenta.RochePolskaSpZOO;
                case "SERVIER POLSKA SERVICES":
                    return NazwaSkroconaProducenta.ServierPolskaServices;
                case "Sandoz GmbH":
                    return NazwaSkroconaProducenta.SandozGmbH;
                case "Teva Pharmaceuticals Sp. z o.o.":
                    return NazwaSkroconaProducenta.TevaPharmaceuticalsSpZOO;
                case "Zentiva K.S.":
                    return NazwaSkroconaProducenta.ZentivaKS;
            }
            throw new Exception("Cannot unmarshal type NazwaSkroconaProducenta");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NazwaSkroconaProducenta)untypedValue;
            switch (value)
            {
                case NazwaSkroconaProducenta.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case NazwaSkroconaProducenta.AdamedSpZOO:
                    serializer.Serialize(writer, "ADAMED Sp.z o.o.");
                    return;
                case NazwaSkroconaProducenta.AmgenSpZOO:
                    serializer.Serialize(writer, "AMGEN Sp. z o.o.");
                    return;
                case NazwaSkroconaProducenta.BaxterPolskaSpZOO:
                    serializer.Serialize(writer, "Baxter Polska Sp.z o.o.");
                    return;
                case NazwaSkroconaProducenta.FreseniusKabiPolskaSpZOO:
                    serializer.Serialize(writer, "FRESENIUS KABI POLSKA SP. Z O.O.");
                    return;
                case NazwaSkroconaProducenta.JanssenCilagPolskaSpZOO:
                    serializer.Serialize(writer, "JANSSEN-CILAG POLSKA Sp. z o.o.");
                    return;
                case NazwaSkroconaProducenta.JohnsonJohnson:
                    serializer.Serialize(writer, "Johnson&Johnson");
                    return;
                case NazwaSkroconaProducenta.Medac:
                    serializer.Serialize(writer, "Medac ");
                    return;
                case NazwaSkroconaProducenta.MerckSpZOO:
                    serializer.Serialize(writer, "Merck Sp. z o.o.");
                    return;
                case NazwaSkroconaProducenta.NovartisPolandSpZOO:
                    serializer.Serialize(writer, "NOVARTIS Poland Sp. z o.o.");
                    return;
                case NazwaSkroconaProducenta.PfizerTradingPolskaSpółkaZOgraniczonąOdpowie:
                    serializer.Serialize(writer, "PFIZER TRADING POLSKA SPÓŁKA Z OGRANICZONĄ ODPOWIE");
                    return;
                case NazwaSkroconaProducenta.PfizerPolskaSpZOO:
                    serializer.Serialize(writer, "Pfizer Polska Sp. z o.o.");
                    return;
                case NazwaSkroconaProducenta.PolfaŁódźSA:
                    serializer.Serialize(writer, "Polfa Łódź S.A.");
                    return;
                case NazwaSkroconaProducenta.RochePolskaSpZOO:
                    serializer.Serialize(writer, "Roche Polska Sp. z o.o.");
                    return;
                case NazwaSkroconaProducenta.ServierPolskaServices:
                    serializer.Serialize(writer, "SERVIER POLSKA SERVICES");
                    return;
                case NazwaSkroconaProducenta.SandozGmbH:
                    serializer.Serialize(writer, "Sandoz GmbH");
                    return;
                case NazwaSkroconaProducenta.TevaPharmaceuticalsSpZOO:
                    serializer.Serialize(writer, "Teva Pharmaceuticals Sp. z o.o.");
                    return;
                case NazwaSkroconaProducenta.ZentivaKS:
                    serializer.Serialize(writer, "Zentiva K.S.");
                    return;
            }
            throw new Exception("Cannot marshal type NazwaSkroconaProducenta");
        }

        public static readonly NazwaSkroconaProducentaConverter Singleton = new NazwaSkroconaProducentaConverter();
    }

    internal class NipDostawcyUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NipDostawcyUnion) || t == typeof(NipDostawcyUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.Empty };
                        case "5212935353":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.The5212935353 };
                        case "5213328885":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.The5213328885 };
                        case "5220014461":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.The5220014461 };
                        case "5222665719":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.The5222665719 };
                        case "5222749770":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.The5222749770 };
                        case "5242625887":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.The5242625887 };
                        case "5242706580":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.The5242706580 };
                        case "5272367467":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.The5272367467 };
                        case "5272420782":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.The5272420782 };
                        case "5320100906":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.The5320100906 };
                        case "6340125442":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.The6340125442 };
                        case "6481008230":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.The6481008230 };
                        case "7281341936":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.The7281341936 };
                        case "8130140525":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.The8130140525 };
                        case "8271818828":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.The8271818828 };
                        case "8490000039":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.The8490000039 };
                        case "8942556799":
                            return new NipDostawcyUnion { Enum = NipDostawcyEnum.The8942556799 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new NipDostawcyUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type NipDostawcyUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (NipDostawcyUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case NipDostawcyEnum.Empty:
                        serializer.Serialize(writer, "");
                        return;
                    case NipDostawcyEnum.The5212935353:
                        serializer.Serialize(writer, "5212935353");
                        return;
                    case NipDostawcyEnum.The5213328885:
                        serializer.Serialize(writer, "5213328885");
                        return;
                    case NipDostawcyEnum.The5220014461:
                        serializer.Serialize(writer, "5220014461");
                        return;
                    case NipDostawcyEnum.The5222665719:
                        serializer.Serialize(writer, "5222665719");
                        return;
                    case NipDostawcyEnum.The5222749770:
                        serializer.Serialize(writer, "5222749770");
                        return;
                    case NipDostawcyEnum.The5242625887:
                        serializer.Serialize(writer, "5242625887");
                        return;
                    case NipDostawcyEnum.The5242706580:
                        serializer.Serialize(writer, "5242706580");
                        return;
                    case NipDostawcyEnum.The5272367467:
                        serializer.Serialize(writer, "5272367467");
                        return;
                    case NipDostawcyEnum.The5272420782:
                        serializer.Serialize(writer, "5272420782");
                        return;
                    case NipDostawcyEnum.The5320100906:
                        serializer.Serialize(writer, "5320100906");
                        return;
                    case NipDostawcyEnum.The6340125442:
                        serializer.Serialize(writer, "6340125442");
                        return;
                    case NipDostawcyEnum.The6481008230:
                        serializer.Serialize(writer, "6481008230");
                        return;
                    case NipDostawcyEnum.The7281341936:
                        serializer.Serialize(writer, "7281341936");
                        return;
                    case NipDostawcyEnum.The8130140525:
                        serializer.Serialize(writer, "8130140525");
                        return;
                    case NipDostawcyEnum.The8271818828:
                        serializer.Serialize(writer, "8271818828");
                        return;
                    case NipDostawcyEnum.The8490000039:
                        serializer.Serialize(writer, "8490000039");
                        return;
                    case NipDostawcyEnum.The8942556799:
                        serializer.Serialize(writer, "8942556799");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type NipDostawcyUnion");
        }

        public static readonly NipDostawcyUnionConverter Singleton = new NipDostawcyUnionConverter();
    }

    internal class NipDostawcyEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NipDostawcyEnum) || t == typeof(NipDostawcyEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return NipDostawcyEnum.Empty;
                case "5212935353":
                    return NipDostawcyEnum.The5212935353;
                case "5213328885":
                    return NipDostawcyEnum.The5213328885;
                case "5220014461":
                    return NipDostawcyEnum.The5220014461;
                case "5222665719":
                    return NipDostawcyEnum.The5222665719;
                case "5222749770":
                    return NipDostawcyEnum.The5222749770;
                case "5242625887":
                    return NipDostawcyEnum.The5242625887;
                case "5242706580":
                    return NipDostawcyEnum.The5242706580;
                case "5272367467":
                    return NipDostawcyEnum.The5272367467;
                case "5272420782":
                    return NipDostawcyEnum.The5272420782;
                case "5320100906":
                    return NipDostawcyEnum.The5320100906;
                case "6340125442":
                    return NipDostawcyEnum.The6340125442;
                case "6481008230":
                    return NipDostawcyEnum.The6481008230;
                case "7281341936":
                    return NipDostawcyEnum.The7281341936;
                case "8130140525":
                    return NipDostawcyEnum.The8130140525;
                case "8271818828":
                    return NipDostawcyEnum.The8271818828;
                case "8490000039":
                    return NipDostawcyEnum.The8490000039;
                case "8942556799":
                    return NipDostawcyEnum.The8942556799;
            }
            throw new Exception("Cannot unmarshal type NipDostawcyEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NipDostawcyEnum)untypedValue;
            switch (value)
            {
                case NipDostawcyEnum.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case NipDostawcyEnum.The5212935353:
                    serializer.Serialize(writer, "5212935353");
                    return;
                case NipDostawcyEnum.The5213328885:
                    serializer.Serialize(writer, "5213328885");
                    return;
                case NipDostawcyEnum.The5220014461:
                    serializer.Serialize(writer, "5220014461");
                    return;
                case NipDostawcyEnum.The5222665719:
                    serializer.Serialize(writer, "5222665719");
                    return;
                case NipDostawcyEnum.The5222749770:
                    serializer.Serialize(writer, "5222749770");
                    return;
                case NipDostawcyEnum.The5242625887:
                    serializer.Serialize(writer, "5242625887");
                    return;
                case NipDostawcyEnum.The5242706580:
                    serializer.Serialize(writer, "5242706580");
                    return;
                case NipDostawcyEnum.The5272367467:
                    serializer.Serialize(writer, "5272367467");
                    return;
                case NipDostawcyEnum.The5272420782:
                    serializer.Serialize(writer, "5272420782");
                    return;
                case NipDostawcyEnum.The5320100906:
                    serializer.Serialize(writer, "5320100906");
                    return;
                case NipDostawcyEnum.The6340125442:
                    serializer.Serialize(writer, "6340125442");
                    return;
                case NipDostawcyEnum.The6481008230:
                    serializer.Serialize(writer, "6481008230");
                    return;
                case NipDostawcyEnum.The7281341936:
                    serializer.Serialize(writer, "7281341936");
                    return;
                case NipDostawcyEnum.The8130140525:
                    serializer.Serialize(writer, "8130140525");
                    return;
                case NipDostawcyEnum.The8271818828:
                    serializer.Serialize(writer, "8271818828");
                    return;
                case NipDostawcyEnum.The8490000039:
                    serializer.Serialize(writer, "8490000039");
                    return;
                case NipDostawcyEnum.The8942556799:
                    serializer.Serialize(writer, "8942556799");
                    return;
            }
            throw new Exception("Cannot marshal type NipDostawcyEnum");
        }

        public static readonly NipDostawcyEnumConverter Singleton = new NipDostawcyEnumConverter();
    }

    internal class NipProducentaUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NipProducentaUnion) || t == typeof(NipProducentaUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "":
                            return new NipProducentaUnion { Enum = NipProducentaEnum.Empty };
                        case "5210000204":
                            return new NipProducentaUnion { Enum = NipProducentaEnum.The5210000204 };
                        case "5212935353":
                            return new NipProducentaUnion { Enum = NipProducentaEnum.The5212935353 };
                        case "5213115586":
                            return new NipProducentaUnion { Enum = NipProducentaEnum.The5213115586 };
                        case "5213328885":
                            return new NipProducentaUnion { Enum = NipProducentaEnum.The5213328885 };
                        case "5220014461":
                            return new NipProducentaUnion { Enum = NipProducentaEnum.The5220014461 };
                        case "5222665719":
                            return new NipProducentaUnion { Enum = NipProducentaEnum.The5222665719 };
                        case "5251032201":
                            return new NipProducentaUnion { Enum = NipProducentaEnum.The5251032201 };
                        case "5260204802":
                            return new NipProducentaUnion { Enum = NipProducentaEnum.The5260204802 };
                        case "5272367467":
                            return new NipProducentaUnion { Enum = NipProducentaEnum.The5272367467 };
                        case "5272420782":
                            return new NipProducentaUnion { Enum = NipProducentaEnum.The5272420782 };
                        case "5340002064":
                            return new NipProducentaUnion { Enum = NipProducentaEnum.The5340002064 };
                        case "7261407230":
                            return new NipProducentaUnion { Enum = NipProducentaEnum.The7261407230 };
                        case "8271818828":
                            return new NipProducentaUnion { Enum = NipProducentaEnum.The8271818828 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new NipProducentaUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type NipProducentaUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (NipProducentaUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case NipProducentaEnum.Empty:
                        serializer.Serialize(writer, "");
                        return;
                    case NipProducentaEnum.The5210000204:
                        serializer.Serialize(writer, "5210000204");
                        return;
                    case NipProducentaEnum.The5212935353:
                        serializer.Serialize(writer, "5212935353");
                        return;
                    case NipProducentaEnum.The5213115586:
                        serializer.Serialize(writer, "5213115586");
                        return;
                    case NipProducentaEnum.The5213328885:
                        serializer.Serialize(writer, "5213328885");
                        return;
                    case NipProducentaEnum.The5220014461:
                        serializer.Serialize(writer, "5220014461");
                        return;
                    case NipProducentaEnum.The5222665719:
                        serializer.Serialize(writer, "5222665719");
                        return;
                    case NipProducentaEnum.The5251032201:
                        serializer.Serialize(writer, "5251032201");
                        return;
                    case NipProducentaEnum.The5260204802:
                        serializer.Serialize(writer, "5260204802");
                        return;
                    case NipProducentaEnum.The5272367467:
                        serializer.Serialize(writer, "5272367467");
                        return;
                    case NipProducentaEnum.The5272420782:
                        serializer.Serialize(writer, "5272420782");
                        return;
                    case NipProducentaEnum.The5340002064:
                        serializer.Serialize(writer, "5340002064");
                        return;
                    case NipProducentaEnum.The7261407230:
                        serializer.Serialize(writer, "7261407230");
                        return;
                    case NipProducentaEnum.The8271818828:
                        serializer.Serialize(writer, "8271818828");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type NipProducentaUnion");
        }

        public static readonly NipProducentaUnionConverter Singleton = new NipProducentaUnionConverter();
    }

    internal class NipProducentaEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NipProducentaEnum) || t == typeof(NipProducentaEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return NipProducentaEnum.Empty;
                case "5210000204":
                    return NipProducentaEnum.The5210000204;
                case "5212935353":
                    return NipProducentaEnum.The5212935353;
                case "5213115586":
                    return NipProducentaEnum.The5213115586;
                case "5213328885":
                    return NipProducentaEnum.The5213328885;
                case "5220014461":
                    return NipProducentaEnum.The5220014461;
                case "5222665719":
                    return NipProducentaEnum.The5222665719;
                case "5251032201":
                    return NipProducentaEnum.The5251032201;
                case "5260204802":
                    return NipProducentaEnum.The5260204802;
                case "5272367467":
                    return NipProducentaEnum.The5272367467;
                case "5272420782":
                    return NipProducentaEnum.The5272420782;
                case "5340002064":
                    return NipProducentaEnum.The5340002064;
                case "7261407230":
                    return NipProducentaEnum.The7261407230;
                case "8271818828":
                    return NipProducentaEnum.The8271818828;
            }
            throw new Exception("Cannot unmarshal type NipProducentaEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NipProducentaEnum)untypedValue;
            switch (value)
            {
                case NipProducentaEnum.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case NipProducentaEnum.The5210000204:
                    serializer.Serialize(writer, "5210000204");
                    return;
                case NipProducentaEnum.The5212935353:
                    serializer.Serialize(writer, "5212935353");
                    return;
                case NipProducentaEnum.The5213115586:
                    serializer.Serialize(writer, "5213115586");
                    return;
                case NipProducentaEnum.The5213328885:
                    serializer.Serialize(writer, "5213328885");
                    return;
                case NipProducentaEnum.The5220014461:
                    serializer.Serialize(writer, "5220014461");
                    return;
                case NipProducentaEnum.The5222665719:
                    serializer.Serialize(writer, "5222665719");
                    return;
                case NipProducentaEnum.The5251032201:
                    serializer.Serialize(writer, "5251032201");
                    return;
                case NipProducentaEnum.The5260204802:
                    serializer.Serialize(writer, "5260204802");
                    return;
                case NipProducentaEnum.The5272367467:
                    serializer.Serialize(writer, "5272367467");
                    return;
                case NipProducentaEnum.The5272420782:
                    serializer.Serialize(writer, "5272420782");
                    return;
                case NipProducentaEnum.The5340002064:
                    serializer.Serialize(writer, "5340002064");
                    return;
                case NipProducentaEnum.The7261407230:
                    serializer.Serialize(writer, "7261407230");
                    return;
                case NipProducentaEnum.The8271818828:
                    serializer.Serialize(writer, "8271818828");
                    return;
            }
            throw new Exception("Cannot marshal type NipProducentaEnum");
        }

        public static readonly NipProducentaEnumConverter Singleton = new NipProducentaEnumConverter();
    }

    internal class NazwaJednostkiMiaryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NazwaJednostkiMiary) || t == typeof(NazwaJednostkiMiary?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "1000 jednostek międzynar.":
                    return NazwaJednostkiMiary.The1000JednostekMiędzynar;
                case "Miligram":
                    return NazwaJednostkiMiary.Miligram;
                case "Schemat":
                    return NazwaJednostkiMiary.Schemat;
                case "Sztuka":
                    return NazwaJednostkiMiary.Sztuka;
                case "ampułki":
                    return NazwaJednostkiMiary.Ampułki;
                case "fiolka":
                    return NazwaJednostkiMiary.Fiolka;
                case "opakowanie":
                    return NazwaJednostkiMiary.Opakowanie;
            }
            throw new Exception("Cannot unmarshal type NazwaJednostkiMiary");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NazwaJednostkiMiary)untypedValue;
            switch (value)
            {
                case NazwaJednostkiMiary.The1000JednostekMiędzynar:
                    serializer.Serialize(writer, "1000 jednostek międzynar.");
                    return;
                case NazwaJednostkiMiary.Miligram:
                    serializer.Serialize(writer, "Miligram");
                    return;
                case NazwaJednostkiMiary.Schemat:
                    serializer.Serialize(writer, "Schemat");
                    return;
                case NazwaJednostkiMiary.Sztuka:
                    serializer.Serialize(writer, "Sztuka");
                    return;
                case NazwaJednostkiMiary.Ampułki:
                    serializer.Serialize(writer, "ampułki");
                    return;
                case NazwaJednostkiMiary.Fiolka:
                    serializer.Serialize(writer, "fiolka");
                    return;
                case NazwaJednostkiMiary.Opakowanie:
                    serializer.Serialize(writer, "opakowanie");
                    return;
            }
            throw new Exception("Cannot marshal type NazwaJednostkiMiary");
        }

        public static readonly NazwaJednostkiMiaryConverter Singleton = new NazwaJednostkiMiaryConverter();
    }

    internal class RodzajConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Rodzaj) || t == typeof(Rodzaj?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Towar")
            {
                return Rodzaj.Towar;
            }
            throw new Exception("Cannot unmarshal type Rodzaj");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Rodzaj)untypedValue;
            if (value == Rodzaj.Towar)
            {
                serializer.Serialize(writer, "Towar");
                return;
            }
            throw new Exception("Cannot marshal type Rodzaj");
        }

        public static readonly RodzajConverter Singleton = new RodzajConverter();
    }

    internal class SkrotJednostkiMiaryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SkrotJednostkiMiary) || t == typeof(SkrotJednostkiMiary?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "SCHEM":
                    return SkrotJednostkiMiary.Schem;
                case "amp":
                    return SkrotJednostkiMiary.Amp;
                case "fiol":
                    return SkrotJednostkiMiary.Fiol;
                case "mg":
                    return SkrotJednostkiMiary.Mg;
                case "op.":
                    return SkrotJednostkiMiary.Op;
                case "szt.":
                    return SkrotJednostkiMiary.Szt;
                case "tysIU":
                    return SkrotJednostkiMiary.TysIu;
            }
            throw new Exception("Cannot unmarshal type SkrotJednostkiMiary");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SkrotJednostkiMiary)untypedValue;
            switch (value)
            {
                case SkrotJednostkiMiary.Schem:
                    serializer.Serialize(writer, "SCHEM");
                    return;
                case SkrotJednostkiMiary.Amp:
                    serializer.Serialize(writer, "amp");
                    return;
                case SkrotJednostkiMiary.Fiol:
                    serializer.Serialize(writer, "fiol");
                    return;
                case SkrotJednostkiMiary.Mg:
                    serializer.Serialize(writer, "mg");
                    return;
                case SkrotJednostkiMiary.Op:
                    serializer.Serialize(writer, "op.");
                    return;
                case SkrotJednostkiMiary.Szt:
                    serializer.Serialize(writer, "szt.");
                    return;
                case SkrotJednostkiMiary.TysIu:
                    serializer.Serialize(writer, "tysIU");
                    return;
            }
            throw new Exception("Cannot marshal type SkrotJednostkiMiary");
        }

        public static readonly SkrotJednostkiMiaryConverter Singleton = new SkrotJednostkiMiaryConverter();
    }

    internal class TypConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Typ) || t == typeof(Typ?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BCD":
                    return Typ.Bcd;
                case "Boolean":
                    return Typ.Boolean;
                case "Date":
                    return Typ.Date;
                case "Float":
                    return Typ.Float;
                case "Integer":
                    return Typ.Integer;
                case "String":
                    return Typ.String;
            }
            throw new Exception("Cannot unmarshal type Typ");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Typ)untypedValue;
            switch (value)
            {
                case Typ.Bcd:
                    serializer.Serialize(writer, "BCD");
                    return;
                case Typ.Boolean:
                    serializer.Serialize(writer, "Boolean");
                    return;
                case Typ.Date:
                    serializer.Serialize(writer, "Date");
                    return;
                case Typ.Float:
                    serializer.Serialize(writer, "Float");
                    return;
                case Typ.Integer:
                    serializer.Serialize(writer, "Integer");
                    return;
                case Typ.String:
                    serializer.Serialize(writer, "String");
                    return;
            }
            throw new Exception("Cannot marshal type Typ");
        }

        public static readonly TypConverter Singleton = new TypConverter();
    }

    internal class WymaganeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Wymagane) || t == typeof(Wymagane?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Nie":
                    return Wymagane.Nie;
                case "Tak":
                    return Wymagane.Tak;
            }
            throw new Exception("Cannot unmarshal type Wymagane");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Wymagane)untypedValue;
            switch (value)
            {
                case Wymagane.Nie:
                    serializer.Serialize(writer, "Nie");
                    return;
                case Wymagane.Tak:
                    serializer.Serialize(writer, "Tak");
                    return;
            }
            throw new Exception("Cannot marshal type Wymagane");
        }

        public static readonly WymaganeConverter Singleton = new WymaganeConverter();
    }

    internal class WierszUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(WierszUnion) || t == typeof(WierszUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<WierszWiersz>(reader);
                    return new WierszUnion { WierszWiersz = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<WierszWiersz[]>(reader);
                    return new WierszUnion { WierszWierszArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type WierszUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (WierszUnion)untypedValue;
            if (value.WierszWierszArray != null)
            {
                serializer.Serialize(writer, value.WierszWierszArray);
                return;
            }
            if (value.WierszWiersz != null)
            {
                serializer.Serialize(writer, value.WierszWiersz);
                return;
            }
            throw new Exception("Cannot marshal type WierszUnion");
        }

        public static readonly WierszUnionConverter Singleton = new WierszUnionConverter();
    }

    internal class OpakowaniaConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Opakowania) || t == typeof(Opakowania?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Opakowania.Empty;
                case "f100":
                    return Opakowania.F100;
            }
            throw new Exception("Cannot unmarshal type Opakowania");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Opakowania)untypedValue;
            switch (value)
            {
                case Opakowania.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Opakowania.F100:
                    serializer.Serialize(writer, "f100");
                    return;
            }
            throw new Exception("Cannot marshal type Opakowania");
        }

        public static readonly OpakowaniaConverter Singleton = new OpakowaniaConverter();
    }
}
